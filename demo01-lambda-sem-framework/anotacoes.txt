# 1. Criar arquivo de políticas de segurança. Ou seja, oq ela pode acessar, 
# quais serviços ela tem para acessar ou não.

#2. Criar role de segurança na AWS, usando o IAM. Observe que as políticas de segurança estão
definidas no arquivo politicas.json.

aws iam create-role --role-name lambda-exemplo2 --assume-role-policy-document file://politicas.json | tee logs/role.log

#3. Criar arquivo com conteudo e zipá-lo.

zip function.zip index.js

aws lambda create-function --function-name hello-cli --zip-file fileb://function.zip --handler index.handler --runtime nodejs14.x --role arn:aws:iam::192041391972:role/lambda-exemplo | tee logs/lambda-create.log
 
#4. Invoke lambda!

aws lambda invoke --function-name hello-cli --log-type Tail logs/lambda-exec.log

#5. Caso queiramos atualizar a função. Toda vez que alterarmos o arquivo .js nós 
# precisamos zipar ele de novo e fazer uploud para a aws.

# Atualizar zip.
zip function.zip index.js

# Atualizar lambda.
aws lambda update-function-code --zip-file fileb://function.zip --function-name hello-cli --publish | tee logs/lambda-update.log

#6 Invoke e veja o novo resultado.
aws lambda invoke --function-name hello-cli --log-type Tail logs/lambda-exec-update.log

#7. Remover os arquivos antigos.
aws lambda delete-function --function-name hello-cli

aws iam delete-role --role-name lambda-exemplo
